name: OpenFIRE Firmware ESP32 Builds

on:
# release:
#   types: [created]
#   # types: [published]
# push:
#   tags:
#     - "v*"
# push:
#   branches: [ main ]
# pull_request:
#   branches: [ main ]
  workflow_dispatch: # Permetti l'attivazione manuale
    inputs:
      release:
        description: "Creare una versione?"
        required: true
        default: "no"
        type: choice
        options:
          - "no"
          - "yes"

# permissions:
#   contents: write # Necessario per actions/upload-release-asset per caricare asset sulla release

jobs:
  build_firmware:
    runs-on: ubuntu-latest
    timeout-minutes: 120  # imposta un timeout di 2 ore
    name: Build Firmware for ${{ matrix.boards }}
    strategy:
      matrix:
        #os: [windows-latest, ubuntu-latest, macos-latest]
        include:
          - name: 'ESP32_S3_WROOM1_DevKitC_1_N16R8' 
            boards: 'ESP32_S3_WROOM1_DevKitC_1_N16R8'
            chip: 'esp32s3'
            flash_size: '16MB'
            flash_mode: 'dio'
            address_littleFS: '0xc90000'
          - name: 'WAVESHARE_ESP32_S3_PICO' 
            boards: 'WAVESHARE_ESP32_S3_PICO'
            chip: 'esp32s3'
            flash_size: '16MB'
            flash_mode: 'dio'         
            address_littleFS: '0xc90000'

    steps:
      - name: Checkout repository OpenFIRE-Firmware-Esp32 with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3"

      - name: Install PlatformIO Core
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio

      - name: Cache PlatformIO
        uses: actions/cache@v4
        with:
          path: ~/.platformio
          key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}

      - if: (matrix.chip == 'esp32s3')
        name: Build firmware OpenFIRE ESP32-S3 - FLASH ${{ matrix.flash_size }} - Compile for ${{ matrix.boards }}
        run: |
          pio run -e ${{ matrix.boards }}
          pio run -e ${{ matrix.boards }} -t buildfs
          python ~/.platformio/packages/tool-esptoolpy/esptool.py --chip ${{ matrix.chip }} merge_bin -o OpenFIREfw-${{ matrix.boards }}.bin --flash_mode ${{ matrix.flash_mode }} --flash_size ${{ matrix.flash_size }} \
            0x0000 .pio/build/${{ matrix.boards }}/bootloader.bin \
            0x8000 .pio/build/${{ matrix.boards }}/partitions.bin \
            0xe000 ~/.platformio/packages/framework-arduinoespressif32/tools/partitions/boot_app0.bin \
            0x10000 .pio/build/${{ matrix.boards }}/firmware.bin \
            ${{ matrix.address_littleFS }} .pio/build/${{ matrix.boards }}/littlefs.bin
          python ~/.platformio/packages/tool-esptoolpy/esptool.py --chip ${{ matrix.chip }} merge_bin -o OpenFIREfw-NoFS-${{ matrix.boards }}.bin --flash_mode ${{ matrix.flash_mode }} --flash_size ${{ matrix.flash_size }} \
            0x0000 .pio/build/${{ matrix.boards }}/bootloader.bin \
            0x8000 .pio/build/${{ matrix.boards }}/partitions.bin \
            0xe000 ~/.platformio/packages/framework-arduinoespressif32/tools/partitions/boot_app0.bin \
            0x10000 .pio/build/${{ matrix.boards }}/firmware.bin
          
      - name: Upload OpenFIRE firmware
        uses: actions/upload-artifact@v4
        with:
          name: OpenFIRE-${{ matrix.boards }}
          path: OpenFIREfw-${{ matrix.boards }}.bin
          if-no-files-found: error

      - name: Upload OpenFIRE-NoFS firmware
        uses: actions/upload-artifact@v4
        with:
          name: OpenFIRE-NoFS-${{ matrix.boards }}
          path: OpenFIREfw-NoFS-${{ matrix.boards }}.bin
          if-no-files-found: error


  release:
    needs: build_firmware
    if: ${{ github.event.inputs.release == 'yes' }}
    runs-on: ubuntu-latest
    steps:
      - name: Download all firmware artifacts
        uses: actions/download-artifact@v4

      - name: Package all firmware in a single ZIP
        run: zip -r OpenFIRE-Firmware-v${{ github.ref_name }}.zip OpenFIRE-*

      - name: Create GitHub Release with all firmware
        uses: softprops/action-gh-release@v1
        with:
          files: OpenFIRE-Firmware-v${{ github.ref_name }}.zip
